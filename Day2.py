# Day 2: http://adventofcode.com/2016/day/2
# Problem:
# Given the following directions (on lines), start at the number 5 on a normal
# 9-key pad and move, when possible, one space in the desired direction until
# the line ends. That is the number for that line. For the next line, start
# at the previous line's endpoint.

# pylint: disable-msg=C0103
# pylint: disable-msg=C0301

# Source directions
directions = """RDLULDLDDRLLLRLRULDRLDDRRRRURLRLDLULDLDLDRULDDLLDRDRUDLLDDRDULLLULLDULRRLDURULDRUULLLUUDURURRDDLDLDRRDDLRURLLDRRRDULDRULURURURURLLRRLUDULDRULLDURRRLLDURDRRUUURDRLLDRURULRUDULRRRRRDLRLLDRRRDLDUUDDDUDLDRUURRLLUDUDDRRLRRDRUUDUUULDUUDLRDLDLLDLLLLRRURDLDUURRLLDLDLLRLLRULDDRLDLUDLDDLRDRRDLULRLLLRUDDURLDLLULRDUUDRRLDUDUDLUURDURRDDLLDRRRLUDULDULDDLLULDDDRRLLDURURURUUURRURRUUDUUURULDLRULRURDLDRDDULDDULLURDDUDDRDRRULRUURRDDRLLUURDRDDRUDLUUDURRRLLRR
RDRRLURDDDDLDUDLDRURRLDLLLDDLURLLRULLULUUURLDURURULDLURRLRULDDUULULLLRLLRDRRUUDLUUDDUDDDRDURLUDDRULRULDDDLULRDDURRUURLRRLRULLURRDURRRURLDULULURULRRLRLUURRRUDDLURRDDUUDRDLLDRLRURUDLDLLLLDLRURDLLRDDUDDLDLDRRDLRDRDLRRRRUDUUDDRDLULUDLUURLDUDRRRRRLUUUDRRDLULLRRLRLDDDLLDLLRDDUUUUDDULUDDDUULDDUUDURRDLURLLRUUUUDUDRLDDDURDRLDRLRDRULRRDDDRDRRRLRDULUUULDLDDDUURRURLDLDLLDLUDDLDLRUDRLRLDURUDDURLDRDDLLDDLDRURRULLURULUUUUDLRLUUUDLDRUDURLRULLRLLUUULURLLLDULLUDLLRULRRLURRRRLRDRRLLULLLDURDLLDLUDLDUDURLURDLUURRRLRLLDRLDLDRLRUUUDRLRUDUUUR
LLLLULRDUUDUUDRDUUURDLLRRLUDDDRLDUUDDURLDUDULDRRRDDLLLRDDUDDLLLRRLURDULRUUDDRRDLRLRUUULDDULDUUUDDLLDDDDDURLDRLDDDDRRDURRDRRRUUDUUDRLRRRUURUDURLRLDURDDDUDDUDDDUUDRUDULDDRDLULRURDUUDLRRDDRRDLRDLRDLULRLLRLRLDLRULDDDDRLDUURLUUDLLRRLLLUUULURUUDULRRRULURUURLDLLRURUUDUDLLUDLDRLLRRUUDDRLUDUDRDDRRDDDURDRUDLLDLUUDRURDLLULLLLUDLRRRUULLRRDDUDDDUDDRDRRULURRUUDLUDLDRLLLLDLUULLULLDDUDLULRDRLDRDLUDUDRRRRLRDLLLDURLULUDDRURRDRUDLLDRURRUUDDDRDUUULDURRULDLLDLDLRDUDURRRRDLDRRLUDURLUDRRLUDDLLDUULLDURRLRDRLURURLUUURRLUDRRLLULUULUDRUDRDLUL
LRUULRRUDUDDLRRDURRUURDURURLULRDUUDUDLDRRULURUDURURDRLDDLRUURLLRDLURRULRRRUDULRRULDLUULDULLULLDUDLLUUULDLRDRRLUURURLLUUUDDLLURDUDURULRDLDUULDDRULLUUUURDDRUURDDDRUUUDRUULDLLULDLURLRRLRULRLDLDURLRLDLRRRUURLUUDULLLRRURRRLRULLRLUUDULDULRDDRDRRURDDRRLULRDURDDDDDLLRRDLLUUURUULUDLLDDULDUDUUDDRURDDURDDRLURUDRDRRULLLURLUULRLUDUDDUUULDRRRRDLRLDLLDRRDUDUUURLRURDDDRURRUDRUURUUDLRDDDLUDLRUURULRRLDDULRULDRLRLLDRLURRUUDRRRLRDDRLDDLLURLLUDL
ULURLRDLRUDLLDUDDRUUULULUDDDDDRRDRULUDRRUDLRRRLUDLRUULRDDRRLRUDLUDULRULLUURLLRLLLLDRDUURDUUULLRULUUUDRDRDRUULURDULDLRRULUURURDULULDRRURDLRUDLULULULUDLLUURULDLLLRDUDDRRLULUDDRLLLRURDDLDLRLLLRDLDRRUUULRLRDDDDRUDRUULDDRRULLDRRLDDRRUDRLLDUDRRUDDRDLRUDDRDDDRLLRDUULRDRLDUDRLDDLLDDDUUDDRULLDLLDRDRRUDDUUURLLUURDLULUDRUUUDURURLRRDULLDRDDRLRDULRDRURRUDLDDRRRLUDRLRRRRLLDDLLRLDUDUDDRRRUULDRURDLLDLUULDLDLDUUDDULUDUDRRDRLDRDURDUULDURDRRDRRLLRLDLU"""

lines = directions.split("\n")
numbers = []
lastNumber = [1, 1]
pad = (("1", "2", "3"), ("4", "5", "6"), ("7", "8", "9"))

for line in lines:
    for direction in line:
        if "R" in direction and lastNumber[1] < 2:
            lastNumber[1] += 1
        if "L" in direction and lastNumber[1] > 0:
            lastNumber[1] -= 1
        if "U" in direction and lastNumber[0] > 0:
            lastNumber[0] -= 1
        if "D" in direction and lastNumber[0] < 2:
            lastNumber[0] += 1
    numbers.append(pad[lastNumber[0]][lastNumber[1]])
print("".join(numbers))

# With a pad that looks like the one below (empty strings are buttons that can't be hit),
# what is the code with the same instructions as before?

numbers = []
lastNumber = [2,0]
newPad = (("", "", "1", "", ""), 
          ("", "2", "3", "4", ""),
          ("5", "6", "7", "8", "9"),
          ("", "A", "B", "C", ""),
          ("", "", "D", "", ""))

for line in lines:
    for direction in line:
        # adding checks to make sure the spot to move to isn't empty
        if "R" in direction and lastNumber[1] < 4 and len(newPad[lastNumber[0]][lastNumber[1]+1]) > 0:
            lastNumber[1] += 1
        if "L" in direction and lastNumber[1] > 0 and len(newPad[lastNumber[0]][lastNumber[1]-1]) > 0:
            lastNumber[1] -= 1
        if "U" in direction and lastNumber[0] > 0 and len(newPad[lastNumber[0]-1][lastNumber[1]]) > 0:
            lastNumber[0] -= 1
        if "D" in direction and lastNumber[0] < 4 and len(newPad[lastNumber[0]+1][lastNumber[1]]) > 0:
            lastNumber[0] += 1
    numbers.append(newPad[lastNumber[0]][lastNumber[1]])
print("".join(numbers))